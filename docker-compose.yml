version: '3.8'

services:
  crud_cards_webapi:
    image: ${DOCKER_REGISTRY-}crudcardswebapi
    build:
      context: .
      dockerfile: src/CRUD_Cards_webapi/Dockerfile
    environment:
       ConnectionStrings__EF__Host: ${CARDSDATABASEEFCOREHOST};
       ConnectionStrings__EF__Port: ${POSTGRESOUTPORT};
       ConnectionStrings__EF__Database: ${CARDSDATABASEEFCORENAME};
       ConnectionStrings__EF__UserId: ${POSTGRESUSER};
       ConnectionStrings__EF__Password: ${POSTGRESPASSWORD};

       ConnectionStrings__Dapper__Host: ${CARDSDATABASEDAPPERHOST};
       ConnectionStrings__Dapper__Port: ${POSTGRESOUTPORT};
       ConnectionStrings__Dapper__Database: ${CARDSDATABASEDAPPERNAME};
       ConnectionStrings__Dapper__UserId: ${POSTGRESUSER};
       ConnectionStrings__Dapper__Password: ${POSTGRESPASSWORD};
    ports:
    - ${CRUDCARDSAPIOUTPUTPORT}:80
    depends_on:
      - db

  identity_server:
    image: ${DOCKER_REGISTRY-}identityserver
    build:
      context: .
      dockerfile: src/Identity_Server/Dockerfile
    environment:
       ConnectionStrings__Identity: ${POSTGRESIDENTITYEFCORE};

       JwtSettings__SecureCode: ${IDENTITYSECURECODE}
       JwtSettings__ValidAudience: crud_cards_webapi
       JwtSettings__ValidIssuer: identity_server
    ports:
    - ${IDENTITYSERVEROUTPUTPORT}:80
    depends_on:
      - identitydb
     

  identitydb:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRESUSER}
      POSTGRES_USER: ${POSTGRESPASSWORD}
    ports:
    - ${POSTGRESIDENTITYOUTPORT}:5432
    volumes:
    - ./tarxosgbsafetydata:/var/lib/postgresql/identitydata

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRESUSER}
      POSTGRES_USER: ${POSTGRESPASSWORD}
    ports:
    - ${POSTGRESOUTPORT}:5432
    volumes:
    - ./tarxosgbsafetydata:/var/lib/postgresql/data

volumes:
  tarxosgbsafetydata: